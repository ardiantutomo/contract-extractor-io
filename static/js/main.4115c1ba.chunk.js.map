{"version":3,"sources":["containers/ContractContainer/ContractInfo.js","containers/ContractContainer/TextContract.js","containers/ContractContainer/OCRContract.js","containers/HomeContainer/Home.js","App.js","serviceWorker.js","index.js","containers/HomeContainer/Home.module.css"],"names":["ContractInfo","props","contractInfo","map","contract","i","title","date","Dragger","Upload","OCRContract","useState","contractData","setContractData","name","multiple","method","action","onChange","info","status","file","console","log","fileList","old","response","message","success","error","span","className","InboxOutlined","Home","state","setState","render","classes","pane","onClick","center","CameraOutlined","style","fontSize","color","FileTextOutlined","TextContract","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.4115c1ba.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ContractInfo = (props) =>{\r\n\r\n    return (\r\n        <>\r\n        {\r\n            props.contractInfo.map((contract, i) =>{\r\n                return(\r\n                    <>\r\n                        <h3>File {i+1}:</h3>\r\n                        <p>Title: <br/>{contract['title'].map(title=>(<>{title} <br/></>))}</p>\r\n                        <p>Contract number: {contract['contract-number']}</p>\r\n                        <p>Date: <br/>{contract['date'].map(date=>(<>{date} <br/></>))}</p>\r\n                        <p>Amount: {contract['money']}</p>\r\n                        <hr/>\r\n                    </>\r\n                )\r\n            })\r\n        }\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default ContractInfo;","import React, {useState} from 'react';\r\nimport { Row, Col } from 'antd';\r\nimport { Upload, message } from 'antd';\r\nimport ContractInfo from './ContractInfo';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nconst { Dragger } = Upload;\r\n\r\n\r\n\r\nconst OCRContract = () => {\r\n  const [contractData, setContractData] = useState([]);\r\n  \r\n  const props = {\r\n    name: 'file',\r\n    multiple: true,\r\n    method: 'POST',\r\n    action: 'http://contract-extractor-io.herokuapp.com/text',\r\n    onChange(info) {\r\n      const { status } = info.file;\r\n      if (status !== 'uploading') {\r\n        console.log(info.file, info.fileList);\r\n      }\r\n      if (status === 'done') {\r\n        setContractData(old => [...old, info.file.response])\r\n        message.success(`${info.file.name} file uploaded successfully.`);\r\n      } else if (status === 'error') {\r\n        message.error(`${info.file.name} file upload failed.`);\r\n      }\r\n    },\r\n  };\r\n  return (\r\n    <>\r\n    <Row>\r\n        <Col span={24} className=\"panel\">\r\n            <center><h1>Text</h1></center>\r\n        </Col>\r\n    </Row>\r\n    <Row>\r\n      \r\n      <Col span={12} className=\"panel\">\r\n        <Dragger {...props}>\r\n          <p className=\"ant-upload-drag-icon\">\r\n            <InboxOutlined />\r\n          </p>\r\n          <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\r\n          <p className=\"ant-upload-hint\">\r\n            Support for a single or bulk upload. Strictly prohibit from uploading company data or other\r\n            band files\r\n          </p>\r\n        </Dragger>\r\n      </Col>\r\n      <Col span={12} className=\"panel\">\r\n       <ContractInfo contractInfo={contractData}/>\r\n      </Col>\r\n    </Row>\r\n    </>\r\n);\r\n}\r\n\r\nexport default OCRContract;","import React, {useState} from 'react';\r\nimport { Row, Col } from 'antd';\r\nimport { Upload, message } from 'antd';\r\nimport ContractInfo from './ContractInfo';\r\nimport { InboxOutlined } from '@ant-design/icons';\r\nconst { Dragger } = Upload;\r\n\r\n\r\n\r\nconst OCRContract = () => {\r\n  const [contractData, setContractData] = useState([]);\r\n  \r\n  const props = {\r\n    name: 'file',\r\n    multiple: true,\r\n    method: 'POST',\r\n    action: 'http://contract-extractor-io.herokuapp.com/ocr',\r\n    onChange(info) {\r\n      const { status } = info.file;\r\n      if (status !== 'uploading') {\r\n        console.log(info.file, info.fileList);\r\n      }\r\n      if (status === 'done') {\r\n        setContractData(old => [...old, info.file.response])\r\n        message.success(`${info.file.name} file uploaded successfully.`);\r\n      } else if (status === 'error') {\r\n        message.error(`${info.file.name} file upload failed.`);\r\n      }\r\n    },\r\n  };\r\n  return (\r\n    <>\r\n    <Row>\r\n        <Col span={24} className=\"panel\">\r\n            <center><h1>OCR</h1></center>\r\n        </Col>\r\n    </Row>\r\n    <Row>\r\n      \r\n      <Col span={12} className=\"panel\">\r\n        <Dragger {...props}>\r\n          <p className=\"ant-upload-drag-icon\">\r\n            <InboxOutlined />\r\n          </p>\r\n          <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\r\n          <p className=\"ant-upload-hint\">\r\n            Support for a single or bulk upload. Strictly prohibit from uploading company data or other\r\n            band files\r\n          </p>\r\n        </Dragger>\r\n      </Col>\r\n      <Col span={12} className=\"panel\">\r\n       <ContractInfo contractInfo={contractData}/>\r\n      </Col>\r\n    </Row>\r\n    </>\r\n);\r\n}\r\n\r\nexport default OCRContract;","import React, {useState} from 'react';\r\nimport { Layout, Menu, Breadcrumb, Row, Col, Button } from 'antd';\r\nimport classes from './Home.module.css'\r\nimport {\r\n  CameraOutlined,\r\n  FileTextOutlined\r\n} from '@ant-design/icons';\r\nimport TextContract from '../ContractContainer/TextContract';\r\nimport OCRContract from '../ContractContainer/OCRContract';\r\n\r\nconst Home = () => {\r\n  const [state, setState] = useState(0) // 0 home, 1 text, 2 ocr\r\n\r\n  const render = state == 0 ?(\r\n    <Row>\r\n      <Col span={12} className={classes.pane} onClick={()=>setState(2)}>\r\n        <div className={classes.center} >\r\n          <CameraOutlined style={{ fontSize: '250px', color: 'rgb(0, 200, 50)' }}/>\r\n          <center><h1>OCR</h1></center>\r\n        </div>\r\n      </Col>\r\n      <Col span={12} className={classes.pane} onClick={()=>setState(1)}>\r\n        <div className={classes.center}>\r\n          <FileTextOutlined style={{ fontSize: '250px', color: '#08c' }}/>\r\n          <center><h1>Text</h1></center>\r\n        </div>\r\n      </Col>\r\n    </Row>\r\n  ) : state == 1 ? <TextContract/> : <OCRContract/>\r\n  return (\r\n    <div>\r\n      {render}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","import React, {useState} from 'react';\nimport { Layout, Menu, Breadcrumb, Row, Col } from 'antd';\nimport './App.css';\nimport { Upload, message } from 'antd';\nimport Choose from './containers/HomeContainer/Home';\n\n\n\nconst App = () => {\n  \n  return (\n    <div className=\"App\">   \n      <Choose/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pane\":\"Home_pane__3eTBF\",\"center\":\"Home_center__2czf1\"};"],"sourceRoot":""}