{"version":3,"sources":["containers/ContractContainer/ContractInfo.js","containers/ContractContainer/TextContract.js","containers/ContractContainer/OCRContract.js","containers/HomeContainer/Home.js","App.js","serviceWorker.js","index.js","containers/HomeContainer/Home.module.css"],"names":["ContractInfo","props","contract","style","padding","map","title","value","date","money","Dragger","Upload","OCRContract","useState","contractData","setContractData","name","multiple","method","action","onChange","info","status","file","console","log","fileList","old","response","message","success","error","span","className","InboxOutlined","i","document","url","filename","socket","io","OCRMessage","setOCRMessage","useEffect","on","data","key","Home","state","setState","render","classes","pane","onClick","center","CameraOutlined","fontSize","color","FileTextOutlined","TextContract","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.d65f3fad.chunk.js","sourcesContent":["import React from 'react';\nimport { Input } from 'antd';\n\nconst ContractInfo = (props) =>{\n    const contract = props.contract;\n    return (\n        <div style={{padding:'50px'}}>\n            <p>Title: <br/>{contract['title'].map(\n                title=>(\n                    <Input value={title}></Input>\n            ))}</p>\n            <p>Contract number: <Input value={contract['contract-number']}/>\n            </p>\n            <p>Date: <br/>{contract['date'].map(date=>(\n                <Input value={date}></Input>\n            ))}</p>\n            <p>Money: <br/>{contract['money'].map(money=>(\n                <Input value={money}></Input>\n            ))}</p>\n            {/* <p>Amount: {contract['money']}</p> */}\n            {/* <hr/> */}\n        </div>\n            \n    );\n}\n\nexport default ContractInfo;","import React, {useState} from 'react';\nimport { Row, Col } from 'antd';\nimport { Upload, message } from 'antd';\nimport ContractInfo from './ContractInfo';\nimport { InboxOutlined } from '@ant-design/icons';\nimport PDFViewer from 'pdf-viewer-reactjs';\nconst { Dragger } = Upload;\n\n\n\nconst OCRContract = () => {\n  const [contractData, setContractData] = useState([]);\n  \n  const props = {\n    name: 'file',\n    multiple: true,\n    method: 'POST',\n    action: 'https://contract-extractor-io.herokuapp.com/text',\n    onChange(info) {\n      const { status } = info.file;\n      if (status !== 'uploading') {\n        console.log(info.file, info.fileList);\n      }\n      if (status === 'done') {\n        setContractData(old => [...old, info.file.response])\n        message.success(`${info.file.name} file uploaded successfully.`);\n      } else if (status === 'error') {\n        message.error(`${info.file.name} file upload failed.`);\n      }\n    },\n  };\n  return (\n    <>\n    <Row>\n        <Col span={24} className=\"panel\">\n            <center><h1>Text</h1></center>\n        </Col>\n    </Row> \n    <Dragger {...props}>\n          <p className=\"ant-upload-drag-icon\">\n            <InboxOutlined />\n          </p>\n          <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n          <p className=\"ant-upload-hint\">\n            Support for a single or bulk upload. Strictly prohibit from uploading company data or other\n            band files\n          </p>\n    </Dragger>\n    {contractData.map((contract, i) =>{\n        return(   \n        <Row>\n            <Col span={12} className=\"panel\">\n                <PDFViewer\n                    document={{\n                        url: 'https://contract-extractor-io.herokuapp.com/data/' + contract.filename,\n                    }}\n                />\n            </Col>\n            <Col span={12} className=\"panel\">\n            <ContractInfo contract={contract}/>\n            </Col>\n        </Row>\n        )\n    })}\n    </>\n);}\n\nexport default OCRContract;","import React, {useState, useEffect} from 'react';\nimport { Row, Col } from 'antd';\nimport { Upload, message } from 'antd';\nimport ContractInfo from './ContractInfo';\nimport { InboxOutlined } from '@ant-design/icons';\nimport PDFViewer from 'pdf-viewer-reactjs';\nimport io from 'socket.io-client';\nconst { Dragger } = Upload;\n\nconst OCRContract = () => {\n  const [contractData, setContractData] = useState([]);\n  const socket = io('http://contract-extractor-io.herokuapp.com/');\n  const [OCRMessage, setOCRMessage] = useState('');\n  const props = {\n    name: 'file',\n    multiple: true,\n    method: 'POST',\n    action: 'https://contract-extractor-io.herokuapp.com/ocr',\n    onChange(info) {\n      const { status } = info.file;\n      if (status !== 'uploading') {\n        // console.log(info.file, info.fileList);\n      }\n      if (status === 'done') {\n        // setContractData(old => [...old, info.file.response])\n        setOCRMessage('Processing...');\n        // message.success(`${info.file.name} file uploaded successfully.`);\n      } else if (status === 'error') {\n        message.error(`${info.file.name} file upload failed.`);\n      }\n    },\n  };\n\n  useEffect(()=>{\n    console.log(\"Halos\")\n    socket.on('connect', function(data){\n      console.log(\"connected\")\n    });\n    socket.on('ocr-data', function(data){\n      console.log(data)\n      setContractData(old => [...old,data])\n      setOCRMessage('')\n    });\n  },[])\n  return (\n    <>\n    <Row>\n        <Col span={24} className=\"panel\">\n            <center><h1>OCR</h1></center>\n        </Col>\n    </Row> \n    <Dragger {...props}>\n          <p className=\"ant-upload-drag-icon\">\n            <InboxOutlined />\n          </p>\n          <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n          <p className=\"ant-upload-hint\">\n            Support for a single or bulk upload. Strictly prohibit from uploading company data or other\n            band files\n          </p>\n    </Dragger>\n    {OCRMessage}\n    {contractData && contractData.map((contract, i) =>{\n        return(   \n        <Row key={i}>\n            <Col span={12} className=\"panel\">\n                <PDFViewer\n                    document={{\n                        url: 'https://contract-extractor-io.herokuapp.com/data/' + contract.filename,\n                    }}\n                />\n            </Col>\n            <Col span={12} className=\"panel\">\n            <ContractInfo contract={contract}/>\n            </Col>\n        </Row>\n        )\n    })}\n    </>\n);\n}\n\nexport default OCRContract;","import React, {useState} from 'react';\nimport { Layout, Menu, Breadcrumb, Row, Col, Button } from 'antd';\nimport classes from './Home.module.css'\nimport {\n  CameraOutlined,\n  FileTextOutlined\n} from '@ant-design/icons';\nimport TextContract from '../ContractContainer/TextContract';\nimport OCRContract from '../ContractContainer/OCRContract';\n\nconst Home = () => {\n  const [state, setState] = useState(0) // 0 home, 1 text, 2 ocr\n\n  const render = state == 0 ?(\n    <Row>\n      <Col span={12} className={classes.pane} onClick={()=>setState(2)}>\n        <div className={classes.center} >\n          <CameraOutlined style={{ fontSize: '250px', color: 'rgb(0, 200, 50)' }}/>\n          <center><h1>OCR</h1></center>\n        </div>\n      </Col>\n      <Col span={12} className={classes.pane} onClick={()=>setState(1)}>\n        <div className={classes.center}>\n          <FileTextOutlined style={{ fontSize: '250px', color: '#08c' }}/>\n          <center><h1>Text</h1></center>\n        </div>\n      </Col>\n    </Row>\n  ) : state == 1 ? <TextContract/> : <OCRContract/>\n  return (\n    <div>\n      {render}\n    </div>\n  );\n}\n\nexport default Home;","import React, {useState} from 'react';\nimport { Layout, Menu, Breadcrumb, Row, Col } from 'antd';\nimport './App.css';\nimport { Upload, message } from 'antd';\nimport Choose from './containers/HomeContainer/Home';\n\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">   \n      <Choose/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pane\":\"Home_pane__3peuj\",\"center\":\"Home_center__2cYIS\"};"],"sourceRoot":""}